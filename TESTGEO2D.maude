load mUnit.maude

(munit GEO2D is
	***(
	assertEqual(p(1.0 0.0) , p(1.0 0.0))
	assertTrue(vertical(r(p(1.0 0.0) p(2.0 0.0))))
	assertTrue(vertical(r(p(3.0 0.0) p(3.0 -5.0))))
	assertEqual(ecu-recta-m(r(p(1.0 1.0) p(0.0 0.0))) , ecu-recta-m(r(p(0.0 0.0) p(-1.0 -1.0))))
	assertEqual(ecu-recta-n(r(p(1.0 1.0) p(0.0 0.0))) , ecu-recta-n(r(p(0.0 0.0) p(-1.0 -1.0))))
	assertEqual(ecu-recta-m(r(p(3.0 1.0) p(0.0 0.0))) , ecu-recta-m(r(p(0.0 0.0) p(-3.0 1.0))))
	assertTrue(son-iguales(r(p(2.0 3.0) p(0.0 0.0)) , r(p(0.0 0.0) p(2.0 3.0))))
	assertTrue(son-iguales(r(p(2.0 3.0) p(0.0 0.0)) , r(p(6.0 -2.0) p(-9.0 2.0))))
	assertTrue(se-cortan(r(p(1.0 0.0) p(0.0 1.0)) , r(p(0.0 0.0) p(1.0 1.0))))
	assertTrue(se-cortan(r(p(1.0 0.0) p(0.0 0.0)) , r(p(2.0 0.0) p(1.0 0.0))))
	assertEqual(pto-corte(r(p(1.0 0.0) p(0.0 1.0)) , r(p(1.0 1.0) p(0.0 0.0))) , p(0.5 0.5))
	assertEqual(pto-corte(r(p(1.0 0.0) p(2.0 0.0)) , r(p(0.0 4.0) p(0.0 -9.0))) , p(0.0 0.0))
	assertEqual(distancia(p(1.0 0.0) , p(0.0 1.0)) , sqrt(2.0))
	assertTrue(esta-en-recta(p(0.0 0.0) , r(p(1.0 1.0) p(-1.0 -1.0))))
	assertTrue(esta-en-recta(p(0.0 0.0) , r(p(1.0 0.0) p(0.0 1.0))))
	assertEqual(convierte-en-recta(1.0 , 0.0) , r(p(0.0 0.0) p(1.0 1.0))) 
	assertEqual(convierte-en-recta(1.0 , 0.0) , r(p(0.0 0.0) p(-1.0 -1.0)))
	assertTrue(son-iguales(convierte-en-recta(1.0 , 0.0) , r(p(0.0 0.0) p(-1.0 -1.0))))
	assertTrue(son-iguales(recta-mediante-vector(vector-director-recta(r(p(0.0 1.0) p(1.0 0.0))) , p(0.5 0.5)) , r(p(1.0 0.0) p(0.0 1.0))))
	)
	assertEqual(recta-perpendicular(r(p(1.0 0.0) p(0.0 1.0)) , p(0.5 0.5)) , r(p(0.0 0.0) p(1.0 1.0)))

endu)
